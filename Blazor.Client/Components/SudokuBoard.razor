@using Blazor.Client.Components.Modals;
@using Blazor.Client.Models;
@using Blazor.Client.Models.Enums;
@using Blazor.Client.Services;

@inject IModalSerivce Modal
@inject ISudokuService Sudoku


<ModalWrapper />

<div class="grid-container">
    <div class="grid-item-button">
        <button class="btn btn-primary" type="button" onclick=@CreatePuzzle>Create puzzle</button>
    </div>
    <div class="grid-item-dropdown">
        <select class="form-control" style="width: 200px;" onchange="@DifficultyClicked">
            <option value="">Select difficulty</option>
            @foreach (var diff in DifficultyList)
            {
                <option value="@diff">@diff</option>
            }
        </select>
    </div>
</div>
<table style="text-align: center;">
    @for(int row = 0; row < 9; row++)
    {
        <tr>
        @for(int col = 0; col < 9; col++)
        {
            <SudokuSquare Cell="Grid?.Grid[row,col]" />
        }
        </tr>
    }
</table>


@functions {
    Difficulty _selectedDifficulty = Difficulty.Easy;
    SudokuGrid Grid;

    List<string> DifficultyList = new List<string>();

    protected override void OnInit()
    {
        DifficultyList = Sudoku.GetDifficulties();
    }

    private void CreatePuzzle()
    {
        if (Grid != null && Grid.IsSolved() == false)
        {
            //Modal.Show("Create new?", typeof(PromptModal));
        }

        Grid = Sudoku.CreatePuzzle(_selectedDifficulty);
    }

    private void DifficultyClicked(UIChangeEventArgs difficultyEvent)
    {
        var selection = difficultyEvent.Value.ToString();
        Enum.TryParse<Difficulty>(selection, out _selectedDifficulty);
    }
}
